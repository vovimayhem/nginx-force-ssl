# RTS Hawkeye v2 Web Nginx Server Configuration
#
# This instance of Nginx is configured to serve only the compiled app as static content.
#
# The SSL stuff (if any) is required to be done by Heroku

worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /tmp/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request ($must_force_ssl $http_x_forwarded_proto)" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # Compression options:
    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

    server_tokens off;

    server {
      # NOTE: The listen PORT will be interpolated by the entrypoint script:
      listen ${PORT} default_server;
      listen [::]:${PORT} default_server ipv6only=on;

      # Cloud routers such as Heroku Router or AWS ELB will add the
      # 'X-Forwarded-Proto' header with the procotol used by the user agent to
      # initiate the request.
      #
      # We will use this in combination with the 'FORCE_SSL' environment
      # variable (which will be interpolated here by the entrypoint script) to
      # determine whether we must force the user agent to switch to HTTPS or not

      set $must_force_ssl '${FORCE_SSL}';

      set $allowed_forwarded_proto $http_x_forwarded_proto;
      if ($must_force_ssl = 'true') { set $allowed_forwarded_proto 'https'; }

      if ($http_x_forwarded_proto != $allowed_forwarded_proto) {
        return 301 https://$host$request_uri;
      }

      root   /usr/share/nginx/html;

      index index.html;
      location / {
        try_files $uri $uri/ /index.html;
      }
    }
}
